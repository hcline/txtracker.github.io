/* =============================================================================
// Grid layout classes
// ===========================================================================*/

/*doc
---
title: Grids
name: grids
category: Layout
---

Grids

```html_example
<a href="#" class="button l-abs top right">Button @ top right</a>
```

*/

@import "../config/all";

/* Gutters
// -------------------------------------------------------------------------- */

$gutter: gutter(); // local reference to global spacing -> see layout/spacing
$gutter-outside: gutter('wide'); // local reference to global spacing -> see layout/spacing

@function add_outside_gutters($w) {
    // compensate for outside margins (ie padding) and split gutters
    @return ($w + ($gutter-outside * 2));
}

/* Grid columns
// -------------------------------------------------------------------------- */

// scale for ratio-based grids and/or type
// -> http://alistapart.com/article/content-out-layout
$grid-scale: 1 1.618 2.618 4.236 6.854 11.089 17.942 29.030 !default;

@function ms($n) {
    @return nth($grid-scale, $n);
}

$grid-default: ms(1) ms(4);

@function grid-column-w($loc, $grid: $grid-default) {
    @return percentage(nth($grid, $loc)/sl-sum($grid));
}

// A wrapper for grid
@mixin grid-wrapper($display: block, $breakpoint: "small") {
    display: $display;
    font-size: 0;
}

@mixin kill-grid-wrapper($display: block) {
    @include font-size-default;
    display: $display;
}

// @PARAM (number) $loc: the column number where this element will live
// @PARAM (list) $grid: the relative widths of columns in the grid
// @PARAM (number) $gutter: width of the gutters b/n columns (note this uses split gutters)
// @PARAM (boolean) $last_fill: should the last item expand to fill the remaining space? defaults to true.
// -> requires SassyLists, Modernizr and modernizr-mixin libraries
@mixin grid-column($loc, $grid: $grid-default, $gutter: $gutter, $last_fill: true, $split: true) {
    @include type-size-default;
    display: inline-block;
    zoom: 1;
    *display: inline;
    width: grid-column-w($loc, $grid);

    @if ($split == true) {
        padding: 0 ($gutter/2);
    } @else {
        padding: 0 $gutter 0 0;
    }

    // adjust padding if this is the first or last element
    &:first-child { padding-left: 0; }
    &:last-child { padding-right: 0; }

    // override inline block if flexbox is supported
    @include yep(flexbox, no-ie) {
        display: block;

        // if this is the last column, tell the element to fill the remaining space
        // -> only works with flexbox. otherwise it just uses percentage width.
        @if ($last_fill == true) {
            @if ($loc == length($grid)) {
                @include flex(1);
                width: auto;

                // IE11 fix
                // -> http://stackoverflow.com/questions/19138107/ie11-flexbox-preventing-text-wrapping
                // -> http://codepen.io/shshaw/pen/jPXdEO
                max-width: 100%;
                @include flex-wrap(wrap);
            }
        }
    }
}

/* Utilities
// -------------------------------------------------------------------------- */

$grids: 1, 2, 3, 4;

@each $grid in $grids {
    .l-cols-1-#{$grid} {
        $grid: ms(1) ms($grid);
        @include grid-wrapper;


        > .l-col-1 {
            @include type-size-default;
            display: block;
            vertical-align: top;

            @include media(">medium") {
                @include grid-column(1, $grid);
            }
        }

        > .l-col-2 {
            @include type-size-default;
            display: block;
            vertical-align: top;

            @include media(">medium") {
                @include grid-column(2, $grid);
            }
        }
    }
}

// Vertically center the columns
.l-cols--vertically_centered {
    > [class^="l-col-"] { vertical-align: middle; }

    @include yep(flexbox) { @include align-items(center); }
}

.l-cols--centered {
    > [class^="l-col-"] { text-align: center; }

    @include yep(flexbox) { @include justify-content(center); }
}

// Limit the maximum width of a column
// -> good for icons, stuff that needs to stay small
.l-col--limited { @include rem(max-width, 200px); }
